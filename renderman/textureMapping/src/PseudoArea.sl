/*
** Copyright (c) 2011 PIXAR.  All rights reserved.  This program or
** documentation contains proprietary confidential information and trade
** secrets of PIXAR.  Reverse engineering of object code is prohibited.
** Use of copyright notice is precautionary and does not imply
** publication.
**
**                      RESTRICTED RIGHTS NOTICE
**
** Use, duplication, or disclosure by the Government is subject to the
** following restrictions:  For civilian agencies, subparagraphs (a) through
** (d) of the Commercial Computer Software--Restricted Rights clause at
** 52.227-19 of the FAR; and, for units of the Department of Defense, DoD
** Supplement to the FAR, clause 52.227-7013 (c)(1)(ii), Rights in
** Technical Data and Computer Software.
**
** Pixar
** 1200 Park Ave
** Emeryville, CA 94608
**
** ----------------------------------------------------------------------------
*/

/* code generated by slim 9.0.3 (Sep 14 2011 21:55:58 @958014) */
/* for rudy@RudysMacBook.local at: Thu Apr 26 23:18:23 PDT 2012 */
/* shader modification timestamp: 1335325398 */


/* Slim interface meta data
 *
<meta id="slim"><![CDATA[
#
# generated by slim for rudy at Thu Apr 26 23:18:23 PDT 2012
#
slim 2 appearance slim {
  instance light PseudoArea slim/shaders/textureManip/PseudoArea {
    attachmenttypes light
    creator {
      appearanceid 00000CW0e-ldoTvJ
      container {slim internal palette}
      containerid 00000CW0e-Vd5RvJ
      filename untitled
      label {untitled 3}
      session /Users/rudy/Desktop/TDChannel/videos/RenderMan/RSL/simpleTexture/textureManip.ma
      timestamp 1335325398
      translator slim
      workspace /Users/rudy/Desktop/TDChannel/videos/pipeline/json/RMSworkspace.ws
    }
    collection void PseudoArea {
      state open
      description {Simulates the soft lighting associated with area lights. In order to get arealight-like soft shadows you should connect the shadows parameter to the ray traced shadows function and enable ray tracing. }
      parameter string Shape {
        label Shape
        range {
		Disk disk
		Line line
		Cylinder cylinder
		Sphere sphere
		Rectangle rectangle
	    }
        subtype selector
        default disk
        value sphere
      }
      parameter float Length {
        label Length
        description {Controls the length of the pseudo arealight. For Line, Cylinder and Rectangle, the length increases along the light's x axis. For Sphere and Disk, Length is ignored. }
        default 1
        value 1
      }
      parameter float Radius {
        label {Radius / Height}
        description {Controls the radius or height of the pseudo arealight. For Sphere, Disk and Cylinder this value determines the radius of the shape. For Rectangle, the height increases along the light's y axis. This parameter is ignored by Line. }
        default 1
        value 1
      }
      parameter float Samples {
        label Samples
        range {1 256 2}
        subtype slider
        default 16
        value 16
      }
    }
  }
}
]]></meta>
<meta id="slimtemplates">
  <template vendor="pixar" version="0">
    <fullname>pixar,PseudoArea#0</fullname>
    <name>PseudoArea</name>
    <usagecount>1</usagecount>
  </template>

</meta>
 */
/* slim defines ------------------------*/
#define SLIM_VERSION 900
#define SLIM_CLIENTMODE_mtor 0
#define SLIM_CLIENTMODE_RenderMan_for_Maya  1
#define SLIM_CLIENTMODE SLIM_CLIENTMODE_RenderMan_for_Maya
#define SLIM_TYPEID_surface 0
#define SLIM_TYPEID_displacement 1
#define SLIM_TYPEID_volume 2
#define SLIM_TYPEID_light 3
#define SLIM_TYPEID_class 4
#define SLIM_TYPEID_imager 5
#define SLIM_SHADERTYPE light
#define SLIM_SHADERTYPEID SLIM_TYPEID_light
#define SLIM_INSTANCETYPE light
#define SLIM_INSTANCENAME PseudoArea

/* includes ---------------------------------*/
#include "pxslRayUtil.h"
#include "pxslUtil.h"

/* template defines -----------------------*/

/* shader ----------------------------------*/
light SLIM_INSTANCENAME (
                 string  Shape = "sphere";
                 float   Length = 1;
                 float   Radius = 1;
                 float   Samples = 16;
  output varying float   __nonspecular = 1;
  output varying float   __nondiffuse = 0;
  output varying color   _shadow = color (0,0,0);
  output varying color   _cl_noshadow = color (0,0,0);
  uniform string _SlimAppLabel = "PseudoArea";
  uniform string _SlimAppID = "00000CW0e-ldoTvJ";
)
{
/* preamble end */



  /* static functions ---------------------------------(*/
  /*) end static functions ---------------------------- */

  /* dynamic functions ----------(*/
  /*) end dynamic functions --------------------------- */

  /* locals ------------------------------- */

  /* main body --------------------------(*/
  float accum, len, dot;
  vector l, ln;
  normal Ns = pxslUtilShadingNormal(N);
  point p = Ps + Ns, pp; /* point above Ps so N.L=1 */
  uniform float nsamples, msamples, n, m;
  _shadow = color(0);
  pxslShapeSamples(Shape, Samples, Length, Radius, nsamples, msamples);
  illuminate(p) {
    accum = 0;
    for (m=0;m<msamples;m+=1) {
      for (n=0;n<nsamples;n+=1) {
        pp = pxslPointOnShape(Shape, Length,
        	    Radius, n, nsamples, m, msamples);
        l = pp - Ps;
        len = length(l);
        if (len > 1e-6) {
          ln = l / len;
          dot = ln.Ns;
          if (dot > 0) {
            accum += pow(len, -0) * dot;
          }
        }
      }
    }
    /* generate (all.1) ----------- */
    __nondiffuse = 1 - 1;
    Cl = (accum / (nsamples*msamples)) * 1.50 * color (1,1,1);
    _cl_noshadow = Cl;
    Cl = pxslCmix(Cl, color (0,0,0), _shadow);
  }
  /*)*/
}

